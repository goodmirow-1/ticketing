name: Development CD Pipeline

on:
  pull_request:
    branches:
      - develop
      - 'release-*'

jobs:
  test: 
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DATABASE }}
        ports:
          - 3306:3306
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Set Environment Variables
        uses: ./.github/workflows/actions/set-env.yaml

      - name: Restore and Install Dependencies
        uses: ./.github/workflows/actions/dependent.yaml

      - name: Run test
        run: |
          pnpm run test

      - name: Close PR on failure
        if: ${{ failure() }}
        uses: ./.github/workflows/actions/failure.yaml
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Restore and Install Dependencies
        uses: ./.github/workflows/actions/dependent.yaml
        
      - name: Run lint
        run: pnpm run lint

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Restore and Install Dependencies
        uses: ./.github/workflows/actions/dependent.yaml

      - name: Run build
        run: pnpm run build

      - name: Close PR on failure
        if: ${{ failure() }}
        uses: ./.github/workflows/actions/failure.yaml
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  dev-cd:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create prod environments
      run: |
        echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" >> .env.production
        echo "DOCKER_HUB_ACCESS_TOKEN=${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" >> .env.production
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Build and Push Docker images
      run: |
        docker build -t goodmirow/ticketing:latest .
        docker push goodmirow/ticketing:latest

    - name: Close PR on failure
      if: ${{ failure() }}
      uses: ./.github/workflows/actions/failure.yaml
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
  # dev-cd:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
      
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #           aws-region: ${{ env.AWS_REGION }}
  #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
  #     - name: Login AWS ECR service
  #       id: ecr-login
  #       uses: aws-actions/amazon-ecr-login@v2
        
  #     - name: Build, tag, and push dev-image to Amazon ECR
  #       id: build-image
  #       env:
  #           ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
  #           IMAGE_TAG: dev-${{ github.sha }}
  #       run: |
  #           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --target=dev
  #           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        # if you want to deploy development application, specify the steps