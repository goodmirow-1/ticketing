name: Development CD Pipeline

on:
    push:
      branches:
        - develop

env:
    AWS_REGION: ap-northeast-2
    ECR_REGISTRY: 533267347071.dkr.ecr.ap-northeast-2.amazonaws.com/ticketing-dev
    ECR_REPOSITORY: ticketing-dev

jobs:
  test: 
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testdb
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Wait for MariaDB
        run: |
          until mysql -h 127.0.0.1 -u user -ppassword -e "SELECT 1"; do
            echo "Waiting for MariaDB to be ready..."
            sleep 5
          done

      - name: Restore dependencies from Cache
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --no-frozen-lockfile

      - name: Run test
        run: pnpm run test
        env:
          DB_TYPE: mariadb
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER_NAME: user
          DB_PASSWORD: password
          DATABASE: testdb
          MAX_CONNECTIONS: 100
          MAX_SEATS: 50

  dev-cd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-region: ${{ env.AWS_REGION }}
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
      - name: Login AWS ECR service
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push dev-image to Amazon ECR
        id: build-image
        env:
            ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
            IMAGE_TAG: dev-${{ github.sha }}
        run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --target=dev
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        # if you want to deploy development application, specify the steps