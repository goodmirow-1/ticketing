name: Production CD Pipeline

on:
    push:
      branches:
        - 'main'

env:
    AWS_REGION: ap-northeast-2
    ECR_REGISTRY: 533267347071.dkr.ecr.ap-northeast-2.amazonaws.com/ticketing-prod
    ECR_REPOSITORY: ticketing-prod
    ECR_REDIS_REGISTRY: 533267347071.dkr.ecr.ap-northeast-2.amazonaws.com/ticketing-redis
    ECR_REDIS_REPOSITORY: ticketing-redis

jobs:
    test: 
      runs-on: ubuntu-latest
      services:
        mariadb:
          image: mariadb:latest
          env:
            MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
            MYSQL_DATABASE: ${{ secrets.DATABASE }}
          ports:
            - 3306:3306
        redis:
          image: redis:latest
          ports:
            - 6379:6379 # Expose Redis on port 6379
      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Setup pnpm
          uses: pnpm/action-setup@v2
          with:
            version: 8
        
        - name: Set Environment Variables
          run: |
            echo "DB_TYPE=${{ secrets.DB_TYPE }}" >> $GITHUB_ENV
            echo "DB_HOST=localhost" >> $GITHUB_ENV
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
            echo "DB_USER_NAME=${{ secrets.DB_USER_NAME }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
            echo "DATABASE=${{ secrets.DATABASE }}" >> $GITHUB_ENV
            echo "MAX_CONNECTIONS=${{ secrets.MAX_CONNECTIONS }}" >> $GITHUB_ENV
            echo "MAX_SEATS=${{ secrets.MAX_SEATS }}" >> $GITHUB_ENV
            echo "SEAT_HOLD_EXPIRATION_TIME=${{ secrets.SEAT_HOLD_EXPIRATION_TIME }}" >> $GITHUB_ENV
            echo "VALID_TOKEN_EXPIRATION_TIME=${{ secrets.VALID_TOKEN_EXPIRATION_TIME }}" >> $GITHUB_ENV
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
            echo "REDIS_HOST=localhost" >> $GITHUB_ENV # Set Redis host
            echo "REDIS_PORT=6379" >> $GITHUB_ENV # Set Redis port

        - name: Restore dependencies from Cache
          id: cache
          uses: actions/cache@v3
          with:
            path: '**/node_modules'
            key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
            restore-keys: |
              ${{ runner.os }}-node-modules-

        - name: Cache pnpm store
          uses: actions/cache@v3
          with:
            path: '~/.pnpm-store'
            key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
            restore-keys: |
              ${{ runner.os }}-pnpm-store-
        
        - name: Install dependencies
          if: steps.cache.outputs.cache-hit != 'true'
          run: pnpm install --no-frozen-lockfile

        - name: Run test
          run: |
            pnpm run test

    # prod-cd:
    #     needs: test
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v3
              
    #         - name: Create prod environments
    #           run: |
    #             echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env.production
    #             echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.production

    #         - name: Extract version
    #           run: echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV
            
    #         - name: Configure AWS credentials
    #           uses: aws-actions/configure-aws-credentials@v1
    #           with:
    #             aws-region: ${{ env.AWS_REGION }}
    #             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
    #             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
    #         - name: Login AWS ECR service
    #           id: ecr-login
    #           uses: aws-actions/amazon-ecr-login@v2
            
    #         - name: Build, tag, and push dev-image to Amazon ECR
    #           id: build-image
    #           env:
    #             ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
    #             IMAGE_TAG: ${{ env.VERSION }}
    #           run: |
    #             docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --target=prod
    #             docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #             echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
            
    #         - name: Render ECS task-definition
    #           id: render-task-definition
    #           uses: aws-actions/amazon-ecs-render-task-definition@v1
    #           with:
    #             task-definition: .taskdefinition/prod-task-definition.json
    #             container-name: service-prod
    #             image: ${{ steps.build-image.outputs.image }}
            
    #         - name: Deploy Amazon ECS task-definition
    #           uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #           with:
    #             task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
    #             service: service-ticketing-nest-prod
    #             cluster: cluster-ticketing-nest-product
    #             wait-for-service-stability: false
            
    #         - name: Close PR on failure
    #           if: ${{ failure() }}
    #           uses: actions/github-script@v6
    #           with:
    #             script: |
    #               github.rest.pulls.update({
    #                 owner: context.repo.owner,
    #                 repo: context.repo.repo,
    #                 pull_number: context.issue.number,
    #                 state: 'closed'
    #               })
    prod-redis-cd:
      needs: test
      runs-on: ubuntu-latest
      steps:
          - name: Checkout
            uses: actions/checkout@v3
            
          - name: Create prod environments
            run: |
              echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env.production
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.production

          - name: Extract version
            run: echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV
          
          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-region: ${{ env.AWS_REGION }}
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
          - name: Login AWS ECR service
            id: ecr-login
            uses: aws-actions/amazon-ecr-login@v2
          
          - name: Build and push redis-image to Amazon ECR
            id: build-redis-image
            env:
              ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
              IMAGE_TAG: ${{ env.VERSION }}
            run: |
              docker build -t $ECR_REDIS_REGISTRY/$ECR_REDIS_REPOSITORY:$IMAGE_TAG . --target=redis
              docker push $ECR_REDIS_REGISTRY/$ECR_REDIS_REPOSITORY:$IMAGE_TAG
              echo "image=$ECR_REDIS_REGISTRY/$ECR_REDIS_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          - name: Render ECS task-definition
            id: render-task-definition
            uses: aws-actions/amazon-ecs-render-task-definition@v1
            with:
              task-definition: .taskdefinition/prod-task-redis-definition.json
              container-name: service-prod
              image: ${{ steps.build-image.outputs.image }}
          
          - name: Deploy Amazon ECS task-definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
              service: service-ticketing-redis-prod
              cluster: cluster-ticketing-nest-product
              wait-for-service-stability: false
          
          - name: Close PR on failure
            if: ${{ failure() }}
            uses: actions/github-script@v6
            with:
              script: |
                github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  state: 'closed'
                })