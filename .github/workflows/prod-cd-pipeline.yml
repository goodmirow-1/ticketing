name: Production CD Pipeline

on:
    push:
      branches:
        - 'main'

env:
    AWS_REGION: ap-northeast-2
    ECR_REGISTRY: 533267347071.dkr.ecr.ap-northeast-2.amazonaws.com/ticketing-prod
    ECR_REPOSITORY: ticketing-prod

jobs:
    test: 
      runs-on: ubuntu-latest
      services:
        mariadb:
          image: mariadb:latest
          env:
            MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
            MYSQL_DATABASE: ${{ secrets.DATABASE }}
          ports:
            - 3306:3306
      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Setup pnpm
          uses: pnpm/action-setup@v2
          with:
            version: 8
        
        - name: Set Environment Variables
          uses: ./.github/workflows/actions/set-env.yaml

        - name: Restore and Install Dependencies
          uses: ./.github/workflows/actions/dependent.yaml

        - name: Run test
          run: |
            pnpm run test
        
        - name: Close PR on failure
          if: ${{ failure() }}
          uses: ./.github/workflows/actions/failure.yaml
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            
    prod-cd:
      needs: test
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
  
        - name: Create prod environments
          run: |
            echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env.production
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.production
  
        - name: Extract version
          run: echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV
  
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-region: ${{ env.AWS_REGION }}
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
        - name: Login AWS ECR service
          uses: aws-actions/amazon-ecr-login@v2
  
        - name: Build, tag, and push image to Amazon ECR
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.VERSION }} . --target=prod
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.VERSION }}
            echo "IMAGE_TAG=${{ env.VERSION }}" >> $GITHUB_ENV
  
        - name: Render ECS task-definition
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: .taskdefinition/prod-task-definition.json
            container-name: service-prod
            image: $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.VERSION }}
  
        - name: Deploy Amazon ECS task-definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
            service: service-ticketing-nest-prod
            cluster: cluster-ticketing-nest-product
            wait-for-service-stability: false
  
        - name: Close PR on failure
          if: ${{ failure() }}
          uses: ./.github/workflows/actions/failure.yaml
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}