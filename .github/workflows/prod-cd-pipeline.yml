name: Production CD Pipeline

on:
    push:
      branches:
        - 'main'

env:
    AWS_REGION: ap-northeast-2
    ECR_REGISTRY: 533267347071.dkr.ecr.ap-northeast-2.amazonaws.com/ticketing-prod
    ECR_REPOSITORY: ticketing-prod

jobs:
    test: 
        runs-on: ubuntu-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v3
    
        - name: Setup pnpm
          uses: pnpm/action-setup@v2
          with:
            version: 8
    
        - name: Restore dependencies from Cache
          id: cache
          uses: actions/cache@v3
          with:
            path: '**/node_modules'
            key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
            restore-keys: |
                ${{ runner.os }}-node-modules-
        
        - name: Install dependencies
          if: steps.cache.outputs.cache-hit != 'true'
          run: pnpm install --no-frozen-lockfile
    
        - name: Run test
          run: pnpm run test
    
    prod-cd:
        needs: test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              
            - name: Create prod environments
              run: |
                echo "DB_TYPE=${{ env.DB_TYPE }}" >> .env.production
                echo "DB_HOST=${{ env.DB_HOST }}" >> .env.production
                echo "DB_PORT=${{ env.DB_PORT }}" >> .env.production
                echo "DB_USER_NAME=${{ env.DB_USER_NAME }}" >> .env.production
                echo "DB_PASSWORD=${{ env.DB_PASSWORD }}" >> .env.production
                echo "DATABASE=${{ env.DATABASE }}" >> .env.production
                echo "MAX_SEATS=${{ env.MAX_SEATS }}" >> .env.production
                echo "VALID_TOKEN_EXPIRATION_TIME=${{ env.VALID_TOKEN_EXPIRATION_TIME }}" >> .env.production
                echo "SEAT_HOLD_EXPIRATION_TIME=${{ env.SEAT_HOLD_EXPIRATION_TIME }}" >> .env.production
                echo "JWT_SECRET_KEY=${{ env.JWT_SECRET_KEY }}" >> .env.production
            
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-region: ${{ env.AWS_REGION }}
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
            - name: Login AWS ECR service
              id: ecr-login
              uses: aws-actions/amazon-ecr-login@v2
            
            - name: Build, tag, and push dev-image to Amazon ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
                IMAGE_TAG: prod-${{ github.sha }}
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --target=prod
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
            
            - name: Render ECS task-definition
              id: render-task-definition
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition: .taskdefinition/prod-task-definition.json
                container-name: service-prod
                image: ${{ steps.build-image.outputs.image }}
            
            - name: Deploy Amazon ECS task-definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
                service: service-ticketing-nest-prod
                cluster: cluster-ticketing-nest-product
                wait-for-service-stability: true